/**
 * Different categories of events supported, within the SignalFx Event API.
 *
 * @example
 * const registry = new SignalFxSelfReportingMetricsRegistry(...);
 * registry.sendEvent('uncaughtException', SignalFxEventCategories.ALERT);
 *
 * @module SignalFxEventCategories
 */
module.exports = {
  /**
   * Created by user via UI or API, e.g. a deployment event
   * @type {SignalFxEventCategoryId}
   */
  USER_DEFINED: 'USER_DEFINED',
  /**
   * Output by anomaly detectors
   * @type {SignalFxEventCategoryId}
   */
  ALERT: 'ALERT',
  /**
   * Audit trail events
   * @type {SignalFxEventCategoryId}
   */
  AUDIT: 'AUDIT',
  /**
   * Generated by analytics server
   * @type {SignalFxEventCategoryId}
   */
  JOB: 'JOB',
  /**
   * Event originated within collectd
   * @type {SignalFxEventCategoryId}
   */
  COLLECTD: 'COLLECTD',
  /**
   * Service discovery event
   * @type {SignalFxEventCategoryId}
   */
  SERVICE_DISCOVERY: 'SERVICE_DISCOVERY',
  /**
   * Created by exception appenders to denote exceptional events
   * @type {SignalFxEventCategoryId}
   */
  EXCEPTION: 'EXCEPTION'
};

/**
 * @interface SignalFxEventCategoryId
 * @typedef SignalFxEventCategoryId
 * @type {string}
 * @example
 * const registry = new SignalFxSelfReportingMetricsRegistry(...);
 * registry.sendEvent('uncaughtException', SignalFxEventCategories.ALERT);
 */
